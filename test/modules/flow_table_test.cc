
#include <catch.h>
#include "../../src/modules/flow_table.h"
#include "../include/raw_packet_data.h"
#include "../../src/types/raw_packet.h"
#include "../../src/modules/raw_packet_parser.h"
#include "../../src/modules/pcap_reader.h"

#include <iostream>
#include <iomanip>

using namespace starflow;

TEST_CASE("FlowTable", "[modules::FlowTable]")
{
	unsigned char pkt_data_a1[] = {
		// 62B, EthII, IP4, TCP [SYN], 145.254.160.237 -> 65.208.228.223, 3372 -> 80
		0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x30, 0x0f, 0x41, 0x40, 0x00, 0x80, 0x06, 0x91, 0xeb, 0x91, 0xfe, 0xa0, 0xed,
		0x41, 0xd0, 0xe4, 0xdf, 0x0d, 0x2c, 0x00, 0x50, 0x38, 0xaf, 0xfe, 0x13, 0x00, 0x00, 0x00,
		0x00, 0x70, 0x02, 0x22, 0x38, 0xc3, 0x0c, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x01, 0x01,
		0x04, 0x02
	};

	unsigned char pkt_data_a2[] = {
		// 54B, EthII, IP4, TCP [ACK], 145.254.160.237 -> 65.208.228.223, 3372 -> 80
		0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x28, 0x0f, 0x4f, 0x40, 0x00, 0x80, 0x06, 0x91, 0xe5, 0x91, 0xfe, 0xa0, 0xed,
		0x41, 0xd0, 0xe4, 0xdf, 0x0d, 0x2c, 0x00, 0x50, 0x38, 0xaf, 0xff, 0xf3, 0x11, 0x4c, 0x8c,
		0xac, 0x50, 0x10, 0x25, 0xbc, 0x4c, 0x65, 0x00, 0x00
	};

	unsigned char pkt_data_a3[] = {
		// 54B, EthII, IP4, TCP [ACK], 145.254.160.237 -> 65.208.228.223, 3372 -> 80
		0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x28, 0x0f, 0x56, 0x40, 0x00, 0x80, 0x06, 0x91, 0xde, 0x91, 0xfe, 0xa0, 0xed,
		0x41, 0xd0, 0xe4, 0xdf, 0x0d, 0x2c, 0x00, 0x50, 0x38, 0xaf, 0xff, 0xf3, 0x11, 0x4c, 0x97,
		0x74, 0x50, 0x10, 0x25, 0xbc, 0x41, 0x9d, 0x00, 0x00
	};

	unsigned char pkt_data_a4[] = {
		// 54B, EthII, IP4, TCP [FIN,ACK], 145.254.160.237 -> 65.208.228.223, 3372 -> 80
		0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x28, 0x0f, 0x62, 0x40, 0x00, 0x80, 0x06, 0x91, 0xd2, 0x91, 0xfe, 0xa0, 0xed,
		0x41, 0xd0, 0xe4, 0xdf, 0x0d, 0x2c, 0x00, 0x50, 0x38, 0xaf, 0xff, 0xf3, 0x11, 0x4c, 0xa9,
		0x49, 0x50, 0x11, 0x24, 0x14, 0x31, 0x6f, 0x00, 0x00
	};

	unsigned char pkt_data_b1[] = {
		// 62B, EthII, IP4, TCP [SYN,ACK], 65.208.228.223 -> 145.254.160.237, 80 -> 3372
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x30, 0x00, 0x00, 0x40, 0x00, 0x2f, 0x06, 0xf2, 0x2c, 0x41, 0xd0, 0xe4, 0xdf,
		0x91, 0xfe, 0xa0, 0xed, 0x00, 0x50, 0x0d, 0x2c, 0x11, 0x4c, 0x61, 0x8b, 0x38, 0xaf, 0xfe,
		0x14, 0x70, 0x12, 0x16, 0xd0, 0x5b, 0xdc, 0x00, 0x00, 0x02, 0x04, 0x05, 0x64, 0x01, 0x01,
		0x04, 0x02
	};

	unsigned char pkt_data_b2[] = {
		// 54B, EthII, IP4, TCP [ACK], 65.208.228.223 -> 145.254.160.237, 80 -> 3372
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x28, 0xc0, 0x9e, 0x40, 0x00, 0x2f, 0x06, 0x31, 0x96, 0x41, 0xd0, 0xe4, 0xdf,
		0x91, 0xfe, 0xa0, 0xed, 0x00, 0x50, 0x0d, 0x2c, 0x11, 0x4c, 0x61, 0x8c, 0x38, 0xaf, 0xff,
		0xf3, 0x50, 0x10, 0x19, 0x20, 0x84, 0x21, 0x00, 0x00
	};

	unsigned char pkt_data_b3[] = {
		// 1434B, EthII, IP4, TCP [ACK], 65.208.228.223 -> 145.254.160.237, 80 -> 3372
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x05, 0x8c, 0xc0, 0x9f, 0x40, 0x00, 0x2f, 0x06, 0x2c, 0x31, 0x41, 0xd0, 0xe4, 0xdf,
		0x91, 0xfe, 0xa0, 0xed, 0x00, 0x50, 0x0d, 0x2c, 0x11, 0x4c, 0x61, 0x8c, 0x38, 0xaf, 0xff,
		0xf3, 0x50, 0x10, 0x19, 0x20, 0x2b, 0x0a, 0x00, 0x00, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31,
		0x2e, 0x31, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x44, 0x61, 0x74, 0x65,
		0x3a, 0x20, 0x54, 0x68, 0x75, 0x2c, 0x20, 0x31, 0x33, 0x20, 0x4d, 0x61, 0x79, 0x20, 0x32,
		0x30, 0x30, 0x34, 0x20, 0x31, 0x30, 0x3a, 0x31, 0x37, 0x3a, 0x31, 0x32, 0x20, 0x47, 0x4d,
		0x54, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x41, 0x70, 0x61, 0x63,
		0x68, 0x65, 0x0d, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
		0x65, 0x64, 0x3a, 0x20, 0x54, 0x75, 0x65, 0x2c, 0x20, 0x32, 0x30, 0x20, 0x41, 0x70, 0x72,
		0x20, 0x32, 0x30, 0x30, 0x34, 0x20, 0x31, 0x33, 0x3a, 0x31, 0x37, 0x3a, 0x30, 0x30, 0x20,
		0x47, 0x4d, 0x54, 0x0d, 0x0a, 0x45, 0x54, 0x61, 0x67, 0x3a, 0x20, 0x22, 0x39, 0x61, 0x30,
		0x31, 0x61, 0x2d, 0x34, 0x36, 0x39, 0x36, 0x2d, 0x37, 0x65, 0x33, 0x35, 0x34, 0x62, 0x30,
		0x30, 0x22, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x52, 0x61, 0x6e, 0x67,
		0x65, 0x73, 0x3a, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
		0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x31, 0x38, 0x30,
		0x37, 0x30, 0x0d, 0x0a, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x3a,
		0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3d, 0x31, 0x35, 0x2c, 0x20, 0x6d, 0x61,
		0x78, 0x3d, 0x31, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
		0x6f, 0x6e, 0x3a, 0x20, 0x4b, 0x65, 0x65, 0x70, 0x2d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x0d,
		0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20,
		0x74, 0x65, 0x78, 0x74, 0x2f, 0x68, 0x74, 0x6d, 0x6c, 0x3b, 0x20, 0x63, 0x68, 0x61, 0x72,
		0x73, 0x65, 0x74, 0x3d, 0x49, 0x53, 0x4f, 0x2d, 0x38, 0x38, 0x35, 0x39, 0x2d, 0x31, 0x0d,
		0x0a, 0x0d, 0x0a, 0x3c, 0x3f, 0x78, 0x6d, 0x6c, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
		0x6e, 0x3d, 0x22, 0x31, 0x2e, 0x30, 0x22, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
		0x67, 0x3d, 0x22, 0x55, 0x54, 0x46, 0x2d, 0x38, 0x22, 0x3f, 0x3e, 0x0a, 0x3c, 0x21, 0x44,
		0x4f, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6d, 0x6c, 0x0a, 0x20, 0x20, 0x50,
		0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x22, 0x2d, 0x2f, 0x2f, 0x57, 0x33, 0x43, 0x2f, 0x2f,
		0x44, 0x54, 0x44, 0x20, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x53,
		0x74, 0x72, 0x69, 0x63, 0x74, 0x2f, 0x2f, 0x45, 0x4e, 0x22, 0x0a, 0x20, 0x20, 0x22, 0x44,
		0x54, 0x44, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x31, 0x2d, 0x73, 0x74, 0x72, 0x69, 0x63,
		0x74, 0x2e, 0x64, 0x74, 0x64, 0x22, 0x3e, 0x0a, 0x3c, 0x68, 0x74, 0x6d, 0x6c, 0x20, 0x78,
		0x6d, 0x6c, 0x6e, 0x73, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
		0x77, 0x2e, 0x77, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x31, 0x39, 0x39, 0x39, 0x2f, 0x78,
		0x68, 0x74, 0x6d, 0x6c, 0x22, 0x20, 0x78, 0x6d, 0x6c, 0x3a, 0x6c, 0x61, 0x6e, 0x67, 0x3d,
		0x22, 0x65, 0x6e, 0x22, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x65, 0x6e, 0x22, 0x3e,
		0x0a, 0x20, 0x20, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c,
		0x74, 0x69, 0x74, 0x6c, 0x65, 0x3e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x3a,
		0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3c, 0x2f, 0x74, 0x69, 0x74, 0x6c,
		0x65, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x20, 0x74,
		0x79, 0x70, 0x65, 0x3d, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x63, 0x73, 0x73, 0x22, 0x20,
		0x6d, 0x65, 0x64, 0x69, 0x61, 0x3d, 0x22, 0x61, 0x6c, 0x6c, 0x22, 0x3e, 0x0a, 0x09, 0x40,
		0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x75, 0x72, 0x6c, 0x28, 0x22, 0x6d, 0x6d, 0x2f,
		0x63, 0x73, 0x73, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2d, 0x33, 0x2d,
		0x30, 0x2e, 0x63, 0x73, 0x73, 0x22, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f,
		0x73, 0x74, 0x79, 0x6c, 0x65, 0x3e, 0x0a, 0x3c, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x3e, 0x0a,
		0x20, 0x20, 0x3c, 0x62, 0x6f, 0x64, 0x79, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x64,
		0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x74, 0x6f, 0x70, 0x22, 0x3e,
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x69, 0x64,
		0x74, 0x68, 0x3d, 0x22, 0x31, 0x30, 0x30, 0x25, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73,
		0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c,
		0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x62, 0x6f, 0x72,
		0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
		0x3d, 0x22, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x72, 0x3e,
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x64, 0x20, 0x76, 0x61,
		0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x22, 0x20, 0x77,
		0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x31, 0x22, 0x3e, 0x0a, 0x09, 0x20, 0x20, 0x3c, 0x61,
		0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x22, 0x3e, 0x3c, 0x69, 0x6d, 0x67, 0x20,
		0x63, 0x6c, 0x61, 0x73, 0x73, 0x3d, 0x22, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x20, 0x74, 0x69,
		0x74, 0x6c, 0x65, 0x3d, 0x22, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x20, 0x68,
		0x6f, 0x6d, 0x65, 0x22, 0x20, 0x73, 0x72, 0x63, 0x3d, 0x22, 0x6d, 0x6d, 0x2f, 0x69, 0x6d,
		0x61, 0x67, 0x65, 0x2f, 0x65, 0x6c, 0x6f, 0x67, 0x6f, 0x2d, 0x36, 0x34, 0x2d, 0x74, 0x72,
		0x61, 0x6e, 0x73, 0x2e, 0x67, 0x69, 0x66, 0x22, 0x20, 0x61, 0x6c, 0x74, 0x3d, 0x22, 0x22,
		0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x3d, 0x22, 0x36, 0x34, 0x22, 0x20, 0x68, 0x65, 0x69,
		0x67, 0x68, 0x74, 0x3d, 0x22, 0x36, 0x34, 0x22, 0x3e, 0x3c, 0x2f, 0x69, 0x6d, 0x67, 0x3e,
		0x3c, 0x2f, 0x61, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f,
		0x74, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x64,
		0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6c, 0x65, 0x66, 0x74, 0x22, 0x20, 0x76,
		0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x22, 0x3e,
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x68, 0x32, 0x3e,
		0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x3c, 0x2f, 0x68, 0x32, 0x3e, 0x0a, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x68, 0x35, 0x20, 0x73, 0x74,
		0x79, 0x6c, 0x65, 0x3d, 0x22, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2d, 0x73, 0x70, 0x61, 0x63,
		0x65, 0x3a, 0x20, 0x6e, 0x6f, 0x77, 0x72, 0x61, 0x70, 0x3b, 0x22, 0x3e, 0x44, 0x6f, 0x77,
		0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x3c, 0x2f, 0x68, 0x35, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x3c, 0x2f, 0x74, 0x64, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x3c, 0x74, 0x64, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x3d, 0x22, 0x72,
		0x69, 0x67, 0x68, 0x74, 0x22, 0x3e, 0x0a, 0x09, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x61,
		0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x3d, 0x22, 0x6d, 0x61, 0x72, 0x67,
		0x69, 0x6e, 0x2d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x70, 0x78, 0x3b,
		0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x3d, 0x22,
		0x30, 0x22, 0x20, 0x63, 0x65, 0x6c, 0x6c, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x3d,
		0x22, 0x30, 0x22, 0x20, 0x62, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3d, 0x22, 0x30, 0x22, 0x20,
		0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x3d, 0x22, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x66, 0x6f, 0x72,
		0x6d, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22,
		0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3d, 0x22, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x20,
		0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
		0x77, 0x77, 0x77, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x2e, 0x63, 0x6f,
		0x6d, 0x2f, 0x63, 0x67, 0x69, 0x2d, 0x62, 0x69, 0x6e, 0x2f, 0x68, 0x74, 0x73, 0x65, 0x61,
		0x72, 0x63, 0x68, 0x22, 0x3e, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x72, 0x3e, 0x0a, 0x09, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x3c, 0x74, 0x64, 0x3e, 0x0a, 0x09, 0x20, 0x20, 0x20, 0x20, 0x20,
		0x20, 0x20, 0x20, 0x20, 0x20, 0x3c, 0x64, 0x69, 0x76, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73,
		0x3d, 0x22, 0x74, 0x6f, 0x70, 0x66, 0x6f, 0x72, 0x6d, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3e,
		0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
	};

	unsigned char pkt_data_b4[] = {
		// 54B, EthII, IP4, TCP [FIN,ACK], 65.208.228.223 -> 145.254.160.237, 80 -> 3372
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x20, 0x00, 0x01, 0x00, 0x08, 0x00, 0x45,
		0x00, 0x00, 0x28, 0xc0, 0xad, 0x40, 0x00, 0x2f, 0x06, 0x31, 0x87, 0x41, 0xd0, 0xe4, 0xdf,
		0x91, 0xfe, 0xa0, 0xed, 0x00, 0x50, 0x0d, 0x2c, 0x11, 0x4c, 0xa9, 0x48, 0x38, 0xaf, 0xff,
		0xf3, 0x50, 0x11, 0x19, 0x20, 0x3c, 0x64, 0x00, 0x00
	};

	modules::RawPacketParser parser;
	types::RawPacket pkt_a1(0, 62, pkt_data_a1);
	types::RawPacket pkt_a2(0, 54, pkt_data_a2);
	types::RawPacket pkt_a3(0, 54, pkt_data_a3);
	types::RawPacket pkt_a4(0, 54, pkt_data_a4);
	types::RawPacket pkt_b1(0, 62, pkt_data_b1);
	types::RawPacket pkt_b2(0, 54, pkt_data_b2);
	types::RawPacket pkt_b3(0, 1434, pkt_data_b3);
	types::RawPacket pkt_b4(0, 54, pkt_data_b4);

	auto pair_a1 = parser(pkt_a1);
	auto pair_a2 = parser(pkt_a2);
	auto pair_a3 = parser(pkt_a3);
	auto pair_a4 = parser(pkt_a4);
	auto pair_b1 = parser(pkt_b1);
	auto pair_b2 = parser(pkt_b2);
	auto pair_b3 = parser(pkt_b3);
	auto pair_b4 = parser(pkt_b4);

	SECTION("add_packet(): packet and flow counters are incremented")
	{
		modules::FlowTable flow_table;
		flow_table.set_mode(modules::FlowTable::mode::store);
		CHECK_NOTHROW(flow_table.add_packet(pair_a1));
		CHECK(flow_table.count_packets() == 1);
		CHECK(flow_table.count_flows() == 1);
	}

	SECTION("add_packet(): appends a packet to a flow if the key already exists")
	{
		modules::FlowTable flow_table;
		flow_table.set_mode(modules::FlowTable::mode::store);
		CHECK_NOTHROW(flow_table.add_packet(pair_a1));
		CHECK_NOTHROW(flow_table.add_packet(pair_a1));
		CHECK_NOTHROW(flow_table.add_packet(pair_a1));
		CHECK(flow_table.count_packets() == 3);
		CHECK(flow_table.count_flows() == 1);
	}

	SECTION("add_packet(): starts a new flow if the key is not unknown")
	{
		modules::FlowTable flow_table;
		flow_table.set_mode(modules::FlowTable::mode::store);
		CHECK_NOTHROW(flow_table.add_packet(pair_a1));
		CHECK_NOTHROW(flow_table.add_packet(pair_a2));
		CHECK_NOTHROW(flow_table.add_packet(pair_b1));
		CHECK(flow_table.count_packets() == 3);
		CHECK(flow_table.count_flows() == 2);
	}

	SECTION("add_packet(): throw a logic_error if in callback mode and no callback is set")
	{
		modules::FlowTable flow_table;
		CHECK_THROWS_AS(flow_table.add_packet(pair_a1), std::logic_error);
	}

	SECTION("add_packet(): evicts a tcp when seeing a FIN packet")
	{
		modules::FlowTable flow_table;
		flow_table.set_mode(modules::FlowTable::mode::store);

		CHECK_NOTHROW(flow_table.add_packet(pair_a1));
		CHECK_NOTHROW(flow_table.add_packet(pair_a2));
		CHECK_NOTHROW(flow_table.add_packet(pair_a3));
		CHECK_NOTHROW(flow_table.add_packet(pair_a4));

		CHECK(flow_table.count_flows() == 0);
		CHECK(flow_table.count_flows_processed() == 1);

		CHECK(flow_table.exported_flows().size() == 1);
		CHECK(flow_table.exported_flows().front().first == pair_a1.first);
		CHECK(flow_table.exported_flows().front().second.n_packets() == 4);
	}

	SECTION("add_packet(): handles multiple flows simultaneously")
	{
		modules::FlowTable flow_table;
		flow_table.set_mode(modules::FlowTable::mode::store);

		modules::PCAPReader pcap_reader;
		pcap_reader.set_file_name("test/data/http.pcap");
		pcap_reader.set_mode(modules::PCAPReader::mode::store);
		REQUIRE_NOTHROW(pcap_reader());

		REQUIRE(pcap_reader.packets().size() == 43);

		for (auto& packet : pcap_reader.packets()) {
			auto pair = parser(packet);
			REQUIRE_NOTHROW(flow_table.add_packet(pair));
		}

		CHECK(flow_table.exported_flows().size() == 2);
		flow_table.force_export_udp(true);
		CHECK(flow_table.exported_flows().size() == 4);
	}
}
